/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VariableStorage,
  VariableStorageInterface,
} from "../VariableStorage";

const _abi = [
  {
    inputs: [],
    name: "storeUint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c3100e1714602d575b600080fd5b60336047565b604051603e9190605a565b60405180910390f35b60005481565b6054816073565b82525050565b6000602082019050606d6000830184604d565b92915050565b600081905091905056fea2646970667358221220e134fc99f3961b3d33c1ab657451a66a768f4247cfb4a4693413a93c8a9d012564736f6c63430008040033";

type VariableStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VariableStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VariableStorage__factory extends ContractFactory {
  constructor(...args: VariableStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VariableStorage";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VariableStorage> {
    return super.deploy(overrides || {}) as Promise<VariableStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VariableStorage {
    return super.attach(address) as VariableStorage;
  }
  connect(signer: Signer): VariableStorage__factory {
    return super.connect(signer) as VariableStorage__factory;
  }
  static readonly contractName: "VariableStorage";
  public readonly contractName: "VariableStorage";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VariableStorageInterface {
    return new utils.Interface(_abi) as VariableStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VariableStorage {
    return new Contract(address, _abi, signerOrProvider) as VariableStorage;
  }
}
