/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AcceptEtherWithLog,
  AcceptEtherWithLogInterface,
} from "../AcceptEtherWithLog";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    inputs: [],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101c0806100206000396000f3fe6080604052600436106100295760003560e01c8063b69ef8a81461002e578063d0e30db014610059575b600080fd5b34801561003a57600080fd5b50610043610063565b60405161005091906100e0565b60405180910390f35b610061610069565b005b60005481565b3460008082825461007a91906100fb565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4346040516100c791906100e0565b60405180910390a2565b6100da81610151565b82525050565b60006020820190506100f560008301846100d1565b92915050565b600061010682610151565b915061011183610151565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101465761014561015b565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122019482b781a995570b00253e43d914a879085078aeb7a9b37d7ee7bbcaeca6d0b64736f6c63430008040033";

type AcceptEtherWithLogConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AcceptEtherWithLogConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AcceptEtherWithLog__factory extends ContractFactory {
  constructor(...args: AcceptEtherWithLogConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AcceptEtherWithLog";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AcceptEtherWithLog> {
    return super.deploy(overrides || {}) as Promise<AcceptEtherWithLog>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AcceptEtherWithLog {
    return super.attach(address) as AcceptEtherWithLog;
  }
  connect(signer: Signer): AcceptEtherWithLog__factory {
    return super.connect(signer) as AcceptEtherWithLog__factory;
  }
  static readonly contractName: "AcceptEtherWithLog";
  public readonly contractName: "AcceptEtherWithLog";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AcceptEtherWithLogInterface {
    return new utils.Interface(_abi) as AcceptEtherWithLogInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AcceptEtherWithLog {
    return new Contract(address, _abi, signerOrProvider) as AcceptEtherWithLog;
  }
}
