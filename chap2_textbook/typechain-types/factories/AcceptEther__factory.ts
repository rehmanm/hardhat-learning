/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AcceptEther, AcceptEtherInterface } from "../AcceptEther";

const _abi = [
  {
    inputs: [],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610172806100206000396000f3fe6080604052600436106100295760003560e01c8063b69ef8a81461002e578063d0e30db014610059575b600080fd5b34801561003a57600080fd5b50610043610063565b6040516100509190610092565b60405180910390f35b610061610069565b005b60005481565b3460008082825461007a91906100ad565b92505081905550565b61008c81610103565b82525050565b60006020820190506100a76000830184610083565b92915050565b60006100b882610103565b91506100c383610103565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156100f8576100f761010d565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212205ea9f5a1726d01630bfb21375bd09fd765cd5823a3cdccf54ca09659890168d364736f6c63430008040033";

type AcceptEtherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AcceptEtherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AcceptEther__factory extends ContractFactory {
  constructor(...args: AcceptEtherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AcceptEther";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AcceptEther> {
    return super.deploy(overrides || {}) as Promise<AcceptEther>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AcceptEther {
    return super.attach(address) as AcceptEther;
  }
  connect(signer: Signer): AcceptEther__factory {
    return super.connect(signer) as AcceptEther__factory;
  }
  static readonly contractName: "AcceptEther";
  public readonly contractName: "AcceptEther";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AcceptEtherInterface {
    return new utils.Interface(_abi) as AcceptEtherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AcceptEther {
    return new Contract(address, _abi, signerOrProvider) as AcceptEther;
  }
}
