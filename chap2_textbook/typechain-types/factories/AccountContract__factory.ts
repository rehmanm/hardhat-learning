/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AccountContract,
  AccountContractInterface,
} from "../AccountContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withDraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061026d806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630fdb1c101461003b5780638da5cb5b14610045575b600080fd5b610043610063565b005b61004d61013a565b60405161005a9190610190565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e8906101ab565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610137573d6000803e3d6000fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610167816101dc565b82525050565b600061017a6009836101cb565b91506101858261020e565b602082019050919050565b60006020820190506101a5600083018461015e565b92915050565b600060208201905081810360008301526101c48161016d565b9050919050565b600082825260208201905092915050565b60006101e7826101ee565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4e6f74204f776e6572000000000000000000000000000000000000000000000060008201525056fea264697066735822122094a20ac78d4dd27e7acb78c8339adabffca2ad8b032677daab4945217964b18e64736f6c63430008040033";

type AccountContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountContract__factory extends ContractFactory {
  constructor(...args: AccountContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AccountContract";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AccountContract> {
    return super.deploy(overrides || {}) as Promise<AccountContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AccountContract {
    return super.attach(address) as AccountContract;
  }
  connect(signer: Signer): AccountContract__factory {
    return super.connect(signer) as AccountContract__factory;
  }
  static readonly contractName: "AccountContract";
  public readonly contractName: "AccountContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountContractInterface {
    return new utils.Interface(_abi) as AccountContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountContract {
    return new Contract(address, _abi, signerOrProvider) as AccountContract;
  }
}
